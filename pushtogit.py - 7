import json
from github import Github
from github.GithubException import UnknownObjectException

def push_to_github(file_name, data):
    try:
        # Authenticate with GitHub using personal access token
        g = Github("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")

        # Specify repository and file path
        repo = g.get_repo("Admin199633/payrize")
        file_path = f"Json_list/{file_name}.json"  # Assuming JSON files are stored in a folder named "Json_list"

        # Retrieve existing file contents from GitHub
        try:
            contents = repo.get_contents(file_path)
            existing_data = json.loads(contents.decoded_content.decode('utf-8'))  # Decode the content

            # Append new data to the existing JSON file
            existing_data.extend(data)

            # Convert the updated data back to JSON format
            updated_content = json.dumps(existing_data, indent=4, ensure_ascii=False)

            # Commit the changes to GitHub
            repo.update_file(contents.path, "Updated data", updated_content, contents.sha)
        except UnknownObjectException:
            # If the file does not exist, create a new file with the provided data
            repo.create_file(file_path, "Initial data", json.dumps(data, indent=4, ensure_ascii=False))
    except Exception as e:
        print(f"An error occurred: {e}")

def main():
    # Load data from the output file
    with open("output5.json", "r", encoding='utf-8') as file:
        data = json.load(file)
        print("Data loaded from output6.json:", data)

    # Iterate through the data and organize it based on the "Flag" value
    for entry in data:
        flag = entry.get("Flag", ["Other"])[0]  # Default to "Other" if no flag is provided
        print("Pushing entry to GitHub with flag:", flag)
        push_to_github(flag, [entry])  # Push the entry to the appropriate JSON file on GitHub

if __name__ == "__main__":
    main()
